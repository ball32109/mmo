/*
 * main.cpp
 *
 *  Created on: Jan 7, 2015
 *      Author: root
 */



#include <event2/event.h>
#include <event2/thread.h>

#include "GlobalInfo.h"
#include "InetAddr.h"
#include "GateMonitor.h"
#include "GameDeamon.h"



void eventCallback(int fd, short which, void *arg)
{
	event_base *base = (event_base*)arg;
	event_base_loopexit(base, NULL);

	printf("stop eventCallback fd = %d\n", fd);
}

int main(int argc, char **argv)
{
	GlobalInfo::useThreads();

	GlobalInfo::print();

	struct event_base *base = event_base_new();

	event *ev = evsignal_new(base, 2, eventCallback, (void* )base);
	if (!ev || event_add(ev, NULL) < 0)
	{
		event_del(ev);
		return false;
	}

	//GATE_MONITOR->eventBase(base);

	GATE_MONITOR->init();
	GATE_MONITOR->start();

	event_base_dispatch(base);

	event_base_free(base);

	GATE_MONITOR->stop();
	GATE_MONITOR->final();

	printf("end of server\n");

//	printf("argc = %d\n", argc);
//	if (argc >= 1)
//	{
//		printf("argv0 = %s\n", argv[0]);
//	}
//	if (argc >= 2)
//	{
//		printf("argv1 = %s\n", argv[1]);
//	}
//	if (argc >= 3)
//	{
//		printf("argv2 = %s\n", argv[2]);
//	}
//
//	GAME_DEAMON->analyseArguments(argc, argv);

	return 0;
}

//int main(int argc, char *argv[])
//{
//    pid_t pid;
//    int cnt = 0;
//
//    printf("main\n");
//
//    pid = fork();
//
//    if (pid == -1) {
//        perror("fork error");
//    } else if (pid == 0) {
//        printf("The returned value is %d\nIn child process!!\nMy PID is %d\n",
//        pid, getpid());
//        cnt++;
//    } else {
//        printf("The returned value is %d\nIn father process!!\nMy PID is %d\n",
//        pid, getpid());
//        cnt++;
//    }
//    printf("cnt = %d\n", cnt);
//
//    return 0;
//}
